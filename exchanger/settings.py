"""
Django settings for exchanger project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
import sentry_sdk
from pathlib import Path
from celery.schedules import crontab
from kombu import Exchange, Queue
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'secret-key-6d%bf5m)z6ars#tfccqeae92)$42u@^jz5(n)ui9lhcr3)u7z4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'account',
    'wallet',
    'order'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'exchanger.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'exchanger.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.getenv("DB_NAME", "default_db_name"),
        "USER": os.getenv("DB_USER", "default_db_user"),
        "PASSWORD": os.getenv("DB_PASSWORD", "default_db_pass"),
        "HOST": os.getenv("DB_HOST", "default_db_host"),
        "PORT": os.getenv("DB_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'
LANGUAGES = [
    ('en', 'English'),
    ('fa', 'Persian'),  # Add Persian language support
]

TIME_ZONE = 'Asia/Tehran'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Application specific configurations
AUTH_USER_MODEL = "account.User"

ORDER_SETTINGS = {
    "CURRENCY_MODEL": "wallet.Currency",
    "WALLET_MODEL": "wallet.Wallet",
    "CURRENCY_SERVICE": "wallet.services.CurrencyService",
    "WALLET_SERVICE": "wallet.services.WalletService",
}

# Redis configuration (used both for distributed locking and as Celery broker/backend)
REDIS_HOST = os.environ.get('REDIS_HOST', 'redis')
REDIS_PORT = os.environ.get('REDIS_PORT', '6379')
REDIS_PASSWORD = os.environ.get('REDIS_PASSWORD', '')
REDIS_URI = f'redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}'

# Celery configuration
# Define the logs directory path using os.path.join
LOG_DIR = os.path.join(BASE_DIR, "logs")
# Create the logs directory if it doesn't exist
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR, exist_ok=True)


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,  # Keeps Django's default loggers active
    "formatters": {
        "verbose": {
            "format": "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            "datefmt": "%d/%b/%Y %H:%M:%S",
        },
        "json": {
            "()": "pythonjsonlogger.jsonlogger.JsonFormatter",
            "format": "%(nameid)s %(asctime)s %(levelname)s %(name)s %(message)s",
            "json_indent": 4,
        },
        "celery": {
            "format": "[%(nameid)s %(levelname)s %(asctime)s %(processName)s %(name)s:%(lineno)d] %(message)s",
            "datefmt": "%d/%b/%Y %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",  # Consistent formatting for console
        },
        "app_file": {
            "level": "WARNING",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "errors.log"),
            "maxBytes": 5 * 1024 * 1024,  # 5 MB
            "backupCount": 10,
            "formatter": "verbose",
        },
        "celery_file": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": os.path.join(LOG_DIR, "celery.log"),
            "when": "midnight",         # Rotate daily at midnight
            "interval": 1,              # Every day
            "backupCount": 7,           # Keep last 7 days of logs
            "formatter": "celery",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "app_file"],
        },
        "django.request": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "django.security": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "py.warnings": {
            "handlers": ["console"],
        },
        # Celery loggers
        "celery": {
            "handlers": ["console", "celery_file"],
            "level": "INFO",
            "propagate": False,
        },
        "celery.task": {
            "handlers": ["console", "celery_file"],
            "level": "INFO",
            "propagate": False,
        },
    }
}


# REST framework configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly",
    ),
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
}


# Sentry configuration
SENTRY_URL = os.getenv("SENTRY_URL", None)

if SENTRY_URL:
    sentry_sdk.init(
        dsn=SENTRY_URL,
        integrations=[
            DjangoIntegration(),
            CeleryIntegration(),
        ],
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production.
        traces_sample_rate=0.1,
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,
    )

# Cache configuration
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URI,
        "TIMEOUT": 60 * 24,
        "OPTIONS": {
            "MAX_ENTRIES": 10000000,
            "SOCKET_TIMEOUT": 5,
            "SOCKET_CONNECT_TIMEOUT": 5,
        },
    }
}
USER_AGENTS_CACHE = 'default'

# Celery configuration
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://redis:6379/1')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://redis:6379/2')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Tehran'  # Set to your timezone

# Celery queues
CELERY_QUEUE_DEFAULT = os.getenv('CELERY_QUEUE_DEFAULT', 'default')
CELERY_QUEUE_AGGREGATE_ORDER = os.getenv('CELERY_QUEUE_AGGREGATE_ORDER', 'aggregate_order')
CELERY_QUEUE_SUBMIT_ORDER = os.getenv('CELERY_QUEUE_SUBMIT_ORDER', 'submit_order')

# Celery Queue Configuration
CELERY_TASK_QUEUES = (
    Queue(
        CELERY_QUEUE_DEFAULT,
        Exchange(CELERY_QUEUE_DEFAULT, type='direct'),
        routing_key=CELERY_QUEUE_DEFAULT
    ),
    Queue(
        CELERY_QUEUE_AGGREGATE_ORDER,
        Exchange(CELERY_QUEUE_AGGREGATE_ORDER, type='direct'),
        routing_key=CELERY_QUEUE_AGGREGATE_ORDER
    ),
    Queue(
        CELERY_QUEUE_SUBMIT_ORDER,
        Exchange(CELERY_QUEUE_SUBMIT_ORDER, type='direct'),
        routing_key=CELERY_QUEUE_SUBMIT_ORDER
    ),
)

# Celery Tasks Routing
CELERY_TASK_ROUTES = {
    'order.tasks.aggregate_order': {'queue': CELERY_QUEUE_AGGREGATE_ORDER},
    'order.tasks.submit_order': {'queue': CELERY_QUEUE_SUBMIT_ORDER},
}

# Celery Beat Configuration
# CELERY_BEAT_SCHEDULE = {
#     'task-name': {
#         'task': 'order.tasks.handle_failed_settled_orders_periodic_task',
#         'schedule': crontab(minute="0", hour="0"),  # Run at midnight every day
#         'args': (),
#     },
# }

# Celery General Configuration
CELERY_TASK_DEFAULT_EXCHANGE = 'default'
CELERY_TASK_DEFAULT_EXCHANGE_TYPE = 'direct'
CELERY_TASK_DEFAULT_ROUTING_KEY = 'default'
CELERY_TASK_DEFAULT_QUEUE = 'default'
CELERY_BROKER_CONNECTION_RETRY = True
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
# todo: remove below on production
CELERY_ALWAYS_EAGER = True
